import org.apache.tools.ant.taskdefs.condition.Os

buildscript {

    ext {
        nexus = {
            credentials {
                username nexusBuildUserToken
                password nexusBuildPassToken
            }
            url nexusRepoURL
        }

        // The drivers we want to use
        drivers = ["firefox", "chrome", "phantomJs"]
    }

    repositories {
        maven(nexus)
        jcenter()
    }

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${dependencyVersionSpringBootGradlePlugin}"
        classpath "net.researchgate:gradle-release:${dependencyVersionGradleReleasePlugin}"
        classpath "mysql:mysql-connector-java:${dependencyVersionMySQLConnector}"
        classpath "com.h2database:h2:${dependencyVersionH2}"
        classpath "org.liquibase:liquibase-gradle-plugin:${dependencyVersionLiquibasePlugin}"
        classpath "se.transmode.gradle:gradle-docker:${dependencyVersionGradleDocker}"
    }
}

// IDE plugins
apply plugin: 'eclipse-wtp'
apply plugin: 'idea'

// Java dev plugins
apply plugin: 'war'
apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'jdepend'
apply plugin: 'spring-boot'
apply plugin: 'maven'

// code quality plugins
apply plugin: 'checkstyle'

// release plugins
apply plugin: 'net.researchgate.release'

// Liquibase plugin
apply plugin: 'org.liquibase.gradle'

// build and run Spock test
apply plugin: 'groovy'

apply from: "gradle/osSpecificDownloads.gradle"

// Docker
apply plugin: 'docker'

repositories {
    maven(nexus)
}

// project artifact info
group = groupId
archivesBaseName = artifactId

// read extra properties
Properties applicationProperties = new Properties()
new File("src/main/resources/application.properties").withInputStream { stream ->
    applicationProperties.load(stream)
}

liquibase {
    activities {
        db {
            // match Liquibase on command line:
            /*
               - generateChangeLog Generate a complete changelog for target database and stores it in changeLogFile
               "$JAVA_HOME/bin/java" -jar liquibase.jar --changeLogFile=database.changelog-master.xml
                                     --username=testdb --password=password --url=jdbc:mysql://localhost:3306/testdb
                                     --driver=com.mysql.jdbc.Driver --classpath=mysql-connector-java-5.1.26-bin.jar
                                     --logLevel=DEBUG --logFile=log.txt
                                     generateChangeLog

               - export data
               "$JAVA_HOME/bin/java" -jar liquibase.jar --changeLogFile=database.changelog-master.data.xml
                                     --username=testdb --password=password --url=jdbc:mysql://localhost:3306/testdb
                                     --driver=com.mysql.jdbc.Driver --classpath=mysql-connector-java-5.1.26-bin.jar
                                     --logLevel=DEBUG --logFile=log.txt
                                     --diffTypes="data"
                                     generateChangeLog

                - diffChangeLog Generate a changelog between old database to new database and stores it in changeLogFile
               "$JAVA_HOME/bin/java" -jar liquibase.jar
                                     --username=testdb --password=password --url=jdbc:mysql://localhost:3306/testdb
                                     --driver=com.mysql.jdbc.Driver --classpath=mysql-connector-java-5.1.26-bin.jar
                                     --logLevel=DEBUG --logFile=log.txt
                                     --referenceUrl=jdbc:mysql://localhost:3306/paf
                                     --referenceUsername=paf --referencePassword=password diffChangeLog

                - update Use changeLogFile's changeSet to patch target database

                - updateSQL Writes SQL to update database to current version to STDOUT

                - changeLogSync Update target database's version with changeLogFile. Those patches won't apply during
                  further updates

                - status Check if changeLogFile's changeSets where applied

                - migrate
                "$JAVA_HOME/bin/java" -jar liquibase.jar --changeLogFile=db.changelog-master.xml
                                      --username=testdb --password=password --url=jdbc:mysql://localhost:3306/testdb
                                      --driver=com.mysql.jdbc.Driver --classpath=mysql-connector-java-5.1.38-bin.jar
                                      migrate
            */
            // support Groovy DSL output
//            changeLogFile 'src/main/resources/db/changelog/changelog.groovy'
//            changeLogFile 'src/main/resources/db/changelog/changelog.data.groovy'
            // support XML output
//            changeLogFile 'src/main/resources/db/changelog/changelog.xml'
//            changeLogFile 'src/main/resources/db/changelog/changelog.data.xml'
            url applicationProperties."spring.datasource.url"
            username applicationProperties."spring.datasource.username"
            password applicationProperties."spring.datasource.password"
            referenceUrl applicationProperties."spring.datasource.test.url"
            referenceUsername applicationProperties."spring.datasource.test.username"
            referencePassword applicationProperties."spring.datasource.test.password"
//            diffTypes 'data'
        }
    }

//    runList = project.ext.runList
    runList = 'db'
}

// configure plugins
uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: nexusReleaseURL) {
                authentication(userName: nexusBuildUserToken, password: nexusBuildPassToken);
            }
            snapshotRepository(url: nexusSnapshotURL) {
                authentication(userName: nexusBuildUserToken, password: nexusBuildPassToken);
            }
        }
    }
}

jacoco {
    toolVersion = "${dependencyVersionJacocoTool}"
    reportsDir = file("${buildDir}/jacocoReportDir")
}

drivers.each { driver ->
    task "${driver}Test"(type: Test) {
//        reports {
//            html.destination = reporting.file("$name/tests")
//            junitXml.destination = file("$buildDir/test-results/$name")
//        }

        // Always run tests
        outputs.upToDateWhen { false }

        systemProperty "geb.build.reportsDir", reporting.file("$name/geb")
        systemProperty "geb.env", driver

        // If you wanted to set the baseUrl in your buildâ€¦
        // systemProperty "geb.build.baseUrl", "http://localhost:8080"

        exclude '**/*TestSuite.class'
        exclude '**/*SpecSuite.class'
    }
}

chromeTest {
    dependsOn unzipChromeDriver

    def chromedriverFilename = Os.isFamily(Os.FAMILY_WINDOWS) ? "chromedriver.exe" : "chromedriver"
    systemProperty "webdriver.chrome.driver", new File(unzipChromeDriver.outputs.files.singleFile, chromedriverFilename).absolutePath
}

phantomJsTest {
    dependsOn unzipPhantomJs

    def phantomJsFilename = Os.isFamily(Os.FAMILY_WINDOWS) ? "phantomjs.exe" : "bin/phantomjs"
    systemProperty "phantomjs.binary.path", new File(unzipPhantomJs.outputs.files.singleFile, phantomJsFilename).absolutePath
}

test {
    // The default value is 1 (no parallel test execution)
    // Comment out due to performance actually downgraded
//    maxParallelForks = 2

    jacoco {
        append = false
        destinationFile = file("$buildDir/jacoco/jacoco.exec")
        classDumpFile = file("$buildDir/jacoco/classpathdumps")
    }

    exclude '**/*TestSuite.class'
    exclude '**/*SpecSuite.class'

    // Disable Functional test
//    dependsOn drivers.collect { tasks["${it}Test"] }
//    enabled = false
    exclude '**/QRAsPostalAddressSpec.class'
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination "${buildDir}/jacocoHtml"
    }
}

release {
    git {
        requireBranch = /master|integration.*/
        pushToCurrentBranch = true
    }
}

task buildDocker(type: Docker, dependsOn: build) {
    push = false
    applicationName = jar.baseName
    dockerfile = file('src/main/docker/Dockerfile')
    doFirst {
        copy {
            from jar
            into stageDir
        }
    }
}

checkstyle {
    toolVersion = "6.0"
}

// only tag a release if the upload of the artefacts to Nexus was successful
createReleaseTag.dependsOn uploadArchives

// configure project specific properties/dependencies

sourceCompatibility = 1.8
targetCompatibility = 1.8

// Add a provided configuration.
// This is used to add jar dependencies that are needed for compile time only
// but should not be bundled in the war/ear projects.
configurations {
    provided
}

sourceSets {
    main.compileClasspath += configurations.provided
    test.compileClasspath += configurations.provided
    test.runtimeClasspath += configurations.provided
}

// optional: if using 'eclipse' plugin
//eclipse.classpath.plusConfigurations += configurations.provided


dependencies {
    compile "org.springframework.boot:spring-boot-starter:${dependencyVersionSpringBoot}"
    compile "org.springframework.boot:spring-boot-starter-data-jpa:${dependencyVersionSpringBoot}"
    compile "org.springframework.boot:spring-boot-starter-security:${dependencyVersionSpringBoot}"
    compile "org.springframework.boot:spring-boot-starter-thymeleaf:${dependencyVersionSpringBoot}"

    // Disable Jetty and return back to Tomcat due to Liquibase doesn't work with Jetty when app in Docker with WARNING:
    //      No Liquibase-Packages entry found in MANIFEST.MF. Using fallback of entire 'liquibase' package
//    compile "org.springframework.boot:spring-boot-starter-jetty:${dependencyVersionSpringBoot}"
    compile ("org.springframework.boot:spring-boot-starter-web:${dependencyVersionSpringBoot}") {
//        exclude module: "spring-boot-starter-tomcat:${dependencyVersionSpringBoot}"
    }

    compile "com.h2database:h2:${dependencyVersionH2}"

    compile "mysql:mysql-connector-java:${dependencyVersionMySQLConnector}"

    // liquibase
    compile "org.liquibase:liquibase-core:${dependencyVersionLiquibase}"

    // model and dto object mapper
    compile "org.modelmapper:modelmapper:${dependencyVersionModelMapper}"

    // webjars.org client side libraries into JAR files
    compile "org.webjars:react:${dependencyVersionReactJS}"
    compile "org.webjars:jquery:${dependencyVersionJQuery}"

    // Groovy
    compile "org.codehaus.groovy:groovy-all:${dependencyVersionGroovy}"

    // Swagger API doc
    compile "io.springfox:springfox-swagger2:${dependencyVersionSpringfoxSwagger}"
    compile "io.springfox:springfox-swagger-ui:${dependencyVersionSpringfoxSwagger}"
    // Hacky way to let springfox-swagger-ui work with webjar convention which contains the swagger-ui static content
    compile "org.webjars:swagger-ui:${dependencyVersionSwaggerUI}"

    // test dependencies
    testCompile "org.springframework.boot:spring-boot-starter-test:${dependencyVersionSpringBoot}"

    // JUnit Toolbox
    testCompile "com.googlecode.junit-toolbox:junit-toolbox:${dependencyVersionJUnitToolbox}"

    // mandatory dependencies for using Spock
    testCompile ("org.spockframework:spock-core:${dependencyVersionSpock}") {
        exclude group: "org.codehaus.groovy"
    }

    testCompile "org.spockframework:spock-spring:${dependencyVersionSpock}"

    testCompile("com.athaydes:spock-reports:${dependencyVersionHawtioSpringBoot}") {
        // this avoids affecting your version of Groovy / Spock
        transitive = false
    }

    testCompile "org.codehaus.groovy.modules.http-builder:http-builder:${dependencyVersionHttpBuilder}"

    // If using Spock, need to depend on geb-spock
    testCompile "org.gebish:geb-spock:${dependencyVersionGeb}"
    // Geb
    testCompile "org.gebish:geb-junit4:${dependencyVersionGeb}"

    // Drivers
    testCompile "org.seleniumhq.selenium:selenium-chrome-driver:${dependencyVersionSeleniumDriver}"
    testCompile "org.seleniumhq.selenium:selenium-firefox-driver:${dependencyVersionSeleniumDriver}"
    // Using a custom version of phantomjs driver for now as the original one does not support WebDriver > 2.43.1
    testCompile("com.codeborne:phantomjsdriver:${dependencyVersionPhantomJsDriver}") {
    // PhantomJs driver pulls in a different selenium version
        transitive = false
    }

    // Selenium support
    testCompile "org.seleniumhq.selenium:selenium-support:${dependencyVersionSeleniumSupport}"
}
