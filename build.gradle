buildscript {

    ext {
        nexus = {
            credentials {
                username nexusBuildUserToken
                password nexusBuildPassToken
            }
            url nexusRepoURL
        }
    }

    repositories {
        maven(nexus)
    }

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${dependencyVersionSpringBootGradlePlugin}"
        classpath "net.researchgate:gradle-release:${dependencyVersionGradleReleasePlugin}"
        classpath "mysql:mysql-connector-java:${dependencyVersionMySQLConnector}"
        classpath "com.h2database:h2:${dependencyVersionH2}"
        classpath "org.liquibase:liquibase-gradle-plugin:${dependencyVersionLiquibasePlugin}"
    }
}

// IDE plugins
apply plugin: 'eclipse-wtp'
apply plugin: 'idea'

// Java dev plugins
apply plugin: 'war'
apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'jdepend'
apply plugin: 'spring-boot'
apply plugin: 'maven'

// code quality plugins
apply plugin: 'checkstyle'

// release plugins
apply plugin: 'net.researchgate.release'

// Liquibase plugin
apply plugin: 'org.liquibase.gradle'

// build and run Spock test
apply plugin: 'groovy'

repositories {
    maven(nexus)
}

// project artifact info
group = groupId
archivesBaseName = artifactId

// read extra properties
Properties applicationProperties = new Properties()
new File("src/main/resources/application.properties").withInputStream { stream ->
    applicationProperties.load(stream)
}

liquibase {
    activities {
        db {
            // match Liquibase on command line:
            /*
               - generateChangeLog Generate a complete changelog for target database and stores it in changeLogFile
               "$JAVA_HOME/bin/java" -jar liquibase.jar --changeLogFile=database.changelog-master.xml
                                     --username=testdb --password=password --url=jdbc:mysql://localhost:3306/testdb
                                     --driver=com.mysql.jdbc.Driver --classpath=mysql-connector-java-5.1.26-bin.jar
                                     --logLevel=DEBUG --logFile=log.txt
                                     generateChangeLog

               - export data
               "$JAVA_HOME/bin/java" -jar liquibase.jar --changeLogFile=database.changelog-master.data.xml
                                     --username=testdb --password=password --url=jdbc:mysql://localhost:3306/testdb
                                     --driver=com.mysql.jdbc.Driver --classpath=mysql-connector-java-5.1.26-bin.jar
                                     --logLevel=DEBUG --logFile=log.txt
                                     --diffTypes="data"
                                     generateChangeLog

                - diffChangeLog Generate a changelog between old database to new database and stores it in changeLogFile
               "$JAVA_HOME/bin/java" -jar liquibase.jar
                                     --username=testdb --password=password --url=jdbc:mysql://localhost:3306/testdb
                                     --driver=com.mysql.jdbc.Driver --classpath=mysql-connector-java-5.1.26-bin.jar
                                     --logLevel=DEBUG --logFile=log.txt
                                     --referenceUrl=jdbc:mysql://localhost:3306/paf
                                     --referenceUsername=paf --referencePassword=password diffChangeLog

                - update Use changeLogFile's changeSet to patch target database

                - updateSQL Writes SQL to update database to current version to STDOUT

                - changeLogSync Update target database's version with changeLogFile. Those patches won't apply during
                  further updates

                - status Check if changeLogFile's changeSets where applied

                - migrate
                "$JAVA_HOME/bin/java" -jar liquibase.jar --changeLogFile=db.changelog-master.xml
                                      --username=testdb --password=password --url=jdbc:mysql://localhost:3306/testdb
                                      --driver=com.mysql.jdbc.Driver --classpath=mysql-connector-java-5.1.38-bin.jar
                                      migrate
            */
            // support Groovy DSL output
//            changeLogFile 'src/main/resources/db/changelog/changelog.groovy'
//            changeLogFile 'src/main/resources/db/changelog/changelog.data.groovy'
            // support XML output
//            changeLogFile 'src/main/resources/db/changelog/changelog.xml'
//            changeLogFile 'src/main/resources/db/changelog/changelog.data.xml'
            url applicationProperties."spring.datasource.url"
            username applicationProperties."spring.datasource.username"
            password applicationProperties."spring.datasource.password"
            referenceUrl applicationProperties."spring.datasource.test.url"
            referenceUsername applicationProperties."spring.datasource.test.username"
            referencePassword applicationProperties."spring.datasource.test.password"
//            diffTypes 'data'
        }
    }

//    runList = project.ext.runList
    runList = 'db'
}

// configure plugins
uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: nexusReleaseURL) {
                authentication(userName: nexusBuildUserToken, password: nexusBuildPassToken);
            }
            snapshotRepository(url: nexusSnapshotURL) {
                authentication(userName: nexusBuildUserToken, password: nexusBuildPassToken);
            }
        }
    }
}

jacoco {
    toolVersion = "${dependencyVersionJacocoTool}"
    reportsDir = file("${buildDir}/jacocoReportDir")
}

test {
    jacoco {
        append = false
        destinationFile = file("$buildDir/jacoco/jacoco.exec")
        classDumpFile = file("$buildDir/jacoco/classpathdumps")
    }

    exclude '**/*TestSuite.class', '**/*SpecSuite.class'
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination "${buildDir}/jacocoHtml"
    }
}

release {
    git {
        requireBranch = /master|integration.*/
        pushToCurrentBranch = true
    }
}

checkstyle {
    toolVersion = "6.0"
}

// only tag a release if the upload of the artefacts to Nexus was successful
createReleaseTag.dependsOn uploadArchives

// configure project specific properties/dependencies

sourceCompatibility = 1.8
targetCompatibility = 1.8

// Add a provided configuration.
// This is used to add jar dependencies that are needed for compile time only
// but should not be bundled in the war/ear projects.
configurations {
    provided
}

sourceSets {
    main.compileClasspath += configurations.provided
    test.compileClasspath += configurations.provided
    test.runtimeClasspath += configurations.provided
}

// optional: if using 'eclipse' plugin
//eclipse.classpath.plusConfigurations += configurations.provided


dependencies {
    compile "org.springframework.boot:spring-boot-starter:${dependencyVersionSpringBoot}"
    compile "org.springframework.boot:spring-boot-starter-data-jpa:${dependencyVersionSpringBoot}"
    compile "org.springframework.boot:spring-boot-starter-security:${dependencyVersionSpringBoot}"
    compile "org.springframework.boot:spring-boot-starter-thymeleaf:${dependencyVersionSpringBoot}"

    compile "org.springframework.boot:spring-boot-starter-jetty:${dependencyVersionSpringBoot}"
    compile ("org.springframework.boot:spring-boot-starter-web:${dependencyVersionSpringBoot}") {
        exclude module: "spring-boot-starter-tomcat:${dependencyVersionSpringBoot}"
    }

    compile "com.h2database:h2:${dependencyVersionH2}"

    compile "mysql:mysql-connector-java:${dependencyVersionMySQLConnector}"

    // liquibase
    compile "org.liquibase:liquibase-core:${dependencyVersionLiquibase}"

    // model and dto object mapper
    compile "org.modelmapper:modelmapper:${dependencyVersionModelMapper}"

    // webjars.org client side libraries into JAR files
    compile "org.webjars:react:${dependencyVersionReactJS}"
    compile "org.webjars:jquery:${dependencyVersionJQuery}"

    // Groovy
    compile "org.codehaus.groovy:groovy-all:${dependencyVersionGroovy}"

    // test dependencies
    testCompile "org.springframework.boot:spring-boot-starter-test:${dependencyVersionSpringBoot}"

    // JUnit Toolbox
    testCompile "com.googlecode.junit-toolbox:junit-toolbox:${dependencyVersionJUnitToolbox}"

    // mandatory dependencies for using Spock
    testCompile "org.spockframework:spock-core:${dependencyVersionSpock}"
    testCompile "org.spockframework:spock-spring:${dependencyVersionSpock}"

    testCompile "org.codehaus.groovy.modules.http-builder:http-builder:${dependencyVersionHttpBuilder}"
}
